{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","console","log","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAkBhD,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAST,EACTU,SApBc,SAACP,GACvBQ,QAAQC,IAAIT,EAAEU,OAAOJ,OACrBR,EAAcE,EAAEU,OAAOJ,Y,uBCLlBK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,8DAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAmBZM,GAnBY,4CAAH,sDCDPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAElC,OACI,yBAAKc,UAAU,0CACX,yBAAMC,IAAQf,EAAMgB,IAAQN,IAC5B,2BAAKA,EAAL,OCACO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECEf,SAAEA,GAAe,IAAD,EAEdhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAoBxC,OAZAC,qBAAW,WACPxB,EAAQC,GACPwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKlB,CAAEpB,IAEEqB,EDrByBK,CAAc1B,GAAjCa,EAD0B,EAChCN,KAAca,EADkB,EAClBA,QAErB,OACI,oCACI,wBAAIJ,UAAY,qCAAuChB,GACtDoB,GAAW,uBAAGJ,UAAY,oCAAf,WAEZ,yBAAKA,UAAU,aAGPH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIiB,IAAQjB,EAAIC,IACPD,UEhBpBkB,EAAe,WAAM,MAGM5C,mBAAS,CAAC,kBAHhB,mBAGvB6C,EAHuB,KAGX9C,EAHW,KAa9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAkBA,IAC/B,6BAEA,4BAEQ8C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACI2B,IAAM3B,EACNA,SAAaA,U,MCvBzC8B,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,U","file":"static/js/main.5a2dc2dc.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); /* evita que Refresh cuando se presione la tecla ENTER */\r\n\r\n        if ( inputValue.trim().length > 2 ) {\r\n            //console.log('submit hecho')\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value = {inputValue} \r\n                onChange ={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n//Video 77. Helpers - getGifs\r\n\r\nexport const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=5&api_key=27NDDX86NxPllfcI8LxZqs2VkKbNOcrj`\r\n    // encodeURI: Encodes a text string as a valid Uniform Resource Identifier (URI)\r\n\r\n    const resp = await fetch( url );\r\n    \r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url /* el signo de interrogacion\r\n            se usa para asegurarse que se utilice la imagen solamente si\r\n            hay alguna disponible, esto lo debe asegurar la api desde donde\r\n            estemos haciendo la peticion */\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img  src = { url } alt = { title } />\r\n            <p>{ title } </p>\r\n        </div>\r\n    )\r\n}\r\n","//import React, { useState, useEffect } from 'react'\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n//import { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n    const {data: images, loading} = useFetchGifs( category ); // custom hook\r\n\r\n    return (\r\n        <>\r\n            <h3 className = \"animate__animated animate__fadeIn\" >{ category }</h3>\r\n            {loading && <p className = \"animate__animated animate__flash\"  >Loading</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem  \r\n                            key = { img.id }\r\n                            { ...img } \r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </> \r\n\r\n\r\n        /* codigo original del return: de esta forma se podia imprimir \r\n        como texto, en una lista ordenada <ol> los elementos del images, \r\n        haciendo un map\r\n\r\n        <div>\r\n        <h3>{ category }</h3>\r\n\r\n        <ol>\r\n            {\r\n                images.map( ( { id, title } ) => (\r\n                <li key = { id }>{ title }</li>\r\n                ))\r\n            }\r\n            \r\n        </ol>\r\n        </div> \r\n        */\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\n","// 78. Custom Hook // 79. useFetchGifs\r\n\r\n// POR CONVENCION, LOS HOOKS Y LOS CUSTOM HOOKS DEBEN EMPEZAR CON LA FRASE 'use'\r\n\r\n//import React from 'react' // no es necesaria, a menos que uds regresen jsx\r\n\r\nimport { useState, useEffect } from 'react'\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // LOS EFECTOS NO PUEDEN SER ASYNC\r\n    useEffect( () => {\r\n        getGifs(category)\r\n        .then(imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n\r\n        })\r\n\r\n    }, [ category ]);\r\n\r\n    return state;\r\n}\r\n","\r\nimport React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\r\n\r\n    const [categories, setCategories] = useState(['Lindsay Lohan'])\r\n\r\n    // const handleAdd = () =>\r\n    // {\r\n    //     // 2 formas de agregar elementos a una constante array\r\n    //     //setcategories( [...categories, 'Hunter X Hunter'] );\r\n\r\n    //     setcategories(cats => [...cats, 'Hunter X Hunter']);\r\n    // }\r\n\r\n    return (\r\n        <>           \r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories }/>\r\n            <hr/>\r\n                \r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category = { category }\r\n                        />\r\n                    )) \r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}